{"version":3,"sources":["Home.js","Mydata.js","App.js","reportWebVitals.js","index.js"],"names":["Home","navigate","useNavigate","useState","color","setColor","row","setRow","col","setCol","rowArr","setrowArr","colArr","setcolArr","data","setData","name","setName","obj","setObj","ok","setOk","input","setInput","plano","setPlano","colorArr","setColorArr","colorOp","setColorOp","useEffect","rowArray","i","push","colArray","handleChange1","e","a","onlyNum","target","value","Number","selectCol","indexOf","alert","id","doc","document","getElementById","style","backgroundColor","dummy","length","index","splice","savePlano","jsonObj","JSON","stringify","fetch","method","mode","headers","body","response","console","log","status","to","className","map","data1","str","toString","onClick","onSubmit","preventDefault","pointerEvents","newObj","dummyObj","newArr","type","onChange","disabled","required","margin","updatedColor","cat_name","cat_color","data_point","d","Mydata","showData","json","data5","parse","fields","width","App","exact","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.b702390c.chunk.js","sourcesContent":["import {React, useState, useEffect} from 'react'\r\nimport ReactColorPicker from '@super-effective/react-color-picker';\r\nimport {Link} from 'react-router-dom'\r\nimport { useNavigate } from \"react-router-dom\";\r\nconst Home = () => {\r\n    let navigate = useNavigate();\r\n    const [color, setColor] = useState('#3cd6bf');\r\n    const [row, setRow] = useState(1);\r\n    const [col, setCol] = useState(1);\r\n    const [rowArr, setrowArr] = useState([0]);\r\n    const [colArr, setcolArr] = useState([0]);\r\n    const [data, setData] = useState([])\r\n    const [name, setName] = useState(\"\")\r\n    const [obj, setObj] = useState([])\r\n    const [ok, setOk] = useState(true)\r\n    const [input, setInput] = useState(true)\r\n    const [plano, setPlano] = useState(\"\")\r\n    const [colorArr, setColorArr] = useState([\"#808080\"])\r\n    const [colorOp, setColorOp] = useState(false)\r\n    useEffect(() => {\r\n        let rowArray = []\r\n        for (var i = 0; i < row; i++) {\r\n            rowArray.push(i)\r\n        }\r\n        setrowArr(rowArray)\r\n        let colArray = []\r\n        for (i = 0; i < col; i++) {\r\n            colArray.push(i)\r\n        }\r\n        setcolArr(colArray)\r\n      },[row, col])\r\n    const onColorChange = (updatedColor) => {\r\n        setColor(updatedColor);\r\n    };\r\n    const handleEvent = (e) => {\r\n        e.preventDefault();\r\n        if (name === \"\") {\r\n            alert(\"Category Name is Required\")\r\n            return\r\n        }\r\n        if (data.length === 0) {\r\n            alert(\"Atleast one row col should be selected\")\r\n            return\r\n        }\r\n        data.map((data1)=>{\r\n            console.log(data1);\r\n            document.getElementById(data1).style.pointerEvents =\"none\";\r\n            return <></>\r\n        })\r\n        let newObj = {\r\n            \"cat_name\" : name,\r\n            \"cat_color\" : color,\r\n            \"data_point\" : {\r\n                \"name\" : data\r\n            }\r\n        }\r\n        let dummyObj = obj;\r\n        dummyObj.push(newObj)\r\n        setObj(dummyObj)\r\n        let newArr = colorArr\r\n        newArr.push(color);\r\n        setColorArr(newArr)\r\n        setData([])\r\n        setOk(!ok)\r\n        setInput(false)\r\n        setName(\"\")\r\n    }\r\n    const handleChange1 = async (e)=> {\r\n        let onlyNum = e.target.value;\r\n        if (onlyNum  !== \"\" && !Number(onlyNum)) {\r\n            return;\r\n        }\r\n        await setRow(onlyNum)\r\n    }\r\n    const handleChange2 = (e)=> {\r\n        let onlyNum = e.target.value;\r\n        if (onlyNum  !== \"\" &&  !Number(onlyNum)) {\r\n            return;\r\n        }\r\n        setCol(e.target.value)\r\n    }\r\n    const handleChange3 = (e)=>{\r\n        setName(e.target.value)\r\n    }\r\n    const selectCol = async (e) => {\r\n        let ind = colorArr.indexOf(color);\r\n        if (ind !== -1) {\r\n            alert(\"Color is Already Taken change the Color\")\r\n            return\r\n        }\r\n        let id = e.target.id;\r\n        let doc = document.getElementById(id)\r\n        if (!doc.style.backgroundColor || doc.style.backgroundColor === 'rgb(128, 128, 128)') {\r\n            doc.style.backgroundColor = color\r\n            let dummy = []\r\n            dummy = data;\r\n            dummy.push(id);\r\n            setData(dummy)\r\n            if(data.length > 0){\r\n                setOk(false); setColorOp(false)\r\n            }\r\n            else {\r\n                setOk(true); setColorOp(true)\r\n            }\r\n            return\r\n        }\r\n        let dummy = []\r\n        dummy = data;\r\n        let index = dummy.indexOf(id);\r\n        dummy.splice(index, 1);\r\n        setData(dummy)\r\n        doc.style.backgroundColor = \"rgb(128, 128, 128)\"\r\n        if(data.length > 0)\r\n            setOk(false)\r\n        else\r\n            setOk(true)\r\n    }\r\n    const handleChange4  = (e) => {\r\n        setPlano(e.target.value)\r\n    }\r\n    const savePlano = async () => {\r\n        if (plano === \"\") {\r\n            alert(\"Planogram Name is Required\")\r\n            return\r\n        }\r\n        const url = \"https://planpgram.herokuapp.com/add\"\r\n        let jsonObj =  {}\r\n        jsonObj.name = plano;\r\n        jsonObj.value = obj\r\n        jsonObj = JSON.stringify(jsonObj)\r\n        let response = await fetch(url, {\r\n            method: 'POST', \r\n            mode: 'cors',\r\n            headers: {\r\n              'Content-Type': 'application/json'\r\n            },\r\n            body: jsonObj \r\n          });\r\n          console.log(response);\r\n          setInput(true)\r\n          if(response.status === 200) {\r\n              alert(\"Successfully Saved Data\");\r\n              navigate(\"/mydata\");\r\n            }\r\n          else  {\r\n            alert(\"Something went wrong\");\r\n              console.log(\"something went wrong\");\r\n              return\r\n          }\r\n    }\r\n    const openColor = () => {\r\n        setColorOp(!colorOp)\r\n    }\r\n    return (\r\n        <>\r\n        <Link to=\"/mydata\"><button className=\"buttonShow\">Show Data</button></Link>\r\n            <main>\r\n                <div className = \"left\">\r\n                   <h1> Planogram Box </h1>\r\n                   {\r\n                      rowArr.map((data)=><div className=\"flexBox\">{\r\n                          colArr.map((data1)=>{\r\n                            var str = data.toString() + ',' + data1.toString()\r\n                              return <div className=\"boxs\" id = {str} onClick = {selectCol}>\r\n                                {data},{data1}\r\n                              </div> \r\n                          })\r\n                        }\r\n                          </div>\r\n                      )\r\n                   }\r\n                   \r\n                </div>\r\n                <div className = \"right\">\r\n                <h1> Planogram UI </h1> \r\n                <form onSubmit={handleEvent}>\r\n                <div className = \"coloumn\">\r\n                   <div className=\"half\">\r\n                    <label>\r\n                    Rows: <p></p>\r\n                    <input type=\"text\" name=\"row\" value={row} onChange={handleChange1} disabled={!input} />\r\n                    </label>\r\n                   </div>\r\n                   <div className=\"half\">\r\n                    <label>\r\n                    Coloumn: <p></p>\r\n                    <input type=\"text\" name=\"col\" value={col} onChange={handleChange2} disabled={!input}/>\r\n                    </label>\r\n                    </div>\r\n                    </div>\r\n                    <p></p>\r\n                    <div className = \"coloumn\">\r\n                   <div className=\"half\">\r\n                    <label>\r\n                    Name a Category: <p></p>\r\n                    <input type=\"text\" name=\"cat\" value={name} onChange={handleChange3} required />\r\n                    </label>\r\n                    </div>\r\n                    <div className=\"half\">\r\n                    <label>\r\n                    Box Color: <p></p>\r\n                    <div className=\"smallBox\" style={{backgroundColor : `${color}`, margin:\"0px\"}} id=\"color\" onClick={ok && openColor}></div>\r\n                    </label>\r\n                    </div>\r\n                    </div>\r\n                    <div>\r\n                        {ok && colorOp ? \r\n                            <>\r\n                            <p></p>\r\n                            <ReactColorPicker className=\"popup\" color={color} onChange={onColorChange} /></>\r\n                        : \"\"}\r\n                    </div>\r\n                    <input className=\"button\" type=\"submit\" value=\"Fix Selection\"/>\r\n                </form>\r\n                <div className=\"savePlano\">\r\n\r\n                    { obj.length > 0 ? \r\n                        <><label>\r\n                        Enter Planogram Name: <p></p>\r\n                        <input type=\"text\" name=\"plano_name\" value={plano} onChange={handleChange4} />\r\n                    </label>\r\n                    <p></p>\r\n                    <button className=\"buttonSave\" onClick={savePlano}>Save Planogram</button></>\r\n                        : ''\r\n                    }\r\n                    </div>\r\n                </div>\r\n            </main>\r\n            <div>\r\n                { obj.length > 0 ? \r\n                    <><h3 className=\"details\">Planogram Details</h3><table>\r\n                        <tr>\r\n                            <td>Category Name</td>\r\n                            <td>Category Color</td>\r\n                            <td>Row, Col Points</td>\r\n                        </tr>\r\n                        {obj.map((data) => {\r\n                            return (<>\r\n                                <tr>\r\n                                    <td>{data.cat_name}</td>\r\n                                    <td>  <p className=\"smallBox\" style={{ backgroundColor: `${data.cat_color}` }}></p></td>\r\n                                    <td>{data.data_point.name.map((d) => {\r\n                                        return <>({d})</>;\r\n                                    })}</td>\r\n                                </tr>\r\n                            </>);\r\n                        })}\r\n                    </table></>\r\n                : '' }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default Home;","import {React, useState, useEffect} from 'react'\r\nimport './mydata.css';\r\nconst Mydata = () => {\r\n    const [data, setData] = useState([])\r\n    useEffect(()=>{\r\n        showData();\r\n    },[]);\r\n    const showData =async () => {\r\n        const url = \"https://planpgram.herokuapp.com/get\"\r\n        let response = await fetch(url, {\r\n            method: 'GET', \r\n            mode: 'cors',\r\n            headers: {\r\n              'Content-Type': 'application/json'\r\n            },\r\n          });\r\n          if (response.status !== 200) {\r\n            alert(\"Something went wrong\")\r\n            return\r\n          }\r\n          let data5 = await response.json();\r\n          data5.map((d)=>{\r\n              d.value = JSON.parse(d.value)\r\n              return <></>\r\n          })\r\n          setData(data5)\r\n    }\r\n    return (\r\n        <>\r\n            {\r\n                data.length  > 0 ? \r\n              data.map((data,index)=><table key={index}>\r\n                  <div className=\"heading\" key={index}>Planogram Name : {data.name}</div>\r\n                  <tr>\r\n                    <th>Category Name</th>\r\n                    <th>Color</th>\r\n                    <th>Row, Col Points</th>\r\n                  </tr>\r\n                {\r\n                  data.value.map((d,index)=>{\r\n                    return <>\r\n                    <tr key={index}>\r\n                      <td>  {d.fields.cat_name}  </td>\r\n                      <td> <p className=\"smallBox\" style={{backgroundColor : `${d.fields.cat_color}`, width:\"20px\"}}></p></td>\r\n                      <td> {\r\n                          d.fields.data_point.name.map((data)=>{\r\n                              return <> ({data}) </>\r\n                          })\r\n                            }</td>\r\n                    </tr>\r\n                    </>\r\n                  })\r\n              }\r\n              </table>)\r\n              : <h1>No Planogram Added </h1>\r\n            }\r\n        </>\r\n\r\n    )\r\n}\r\nexport default Mydata;\r\n","import './App.css';\r\nimport Home from './Home';\r\n\r\nimport Mydata from './Mydata';\r\nimport {Route, Routes} from 'react-router-dom'\r\nfunction App() {\r\n  return (\r\n    <>\r\n    <Routes>\r\n    <Route exact path=\"/\" element={<Home/>}/>\r\n      <Route path=\"/mydata\" element={<Mydata/>} />\r\n    </Routes>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { BrowserRouter as Router} from 'react-router-dom';\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router>\r\n  <App />\r\n    </Router>\r\n    \r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n\r\n"],"sourceRoot":""}